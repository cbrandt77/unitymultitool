/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.nfhsnetwork.calebsunitytool.ui;

import java.awt.Dialog;
import java.io.File;
import java.util.Arrays;
import java.util.concurrent.ExecutionException;
import java.util.function.Function;

import javax.swing.JOptionPane;
import javax.swing.JProgressBar;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

import com.nfhsnetwork.calebsunitytool.Wrapper;
import com.nfhsnetwork.calebsunitytool.common.UnityContainer;
import com.nfhsnetwork.calebsunitytool.common.UnityContainer.ImportTypes;
import com.nfhsnetwork.calebsunitytool.scripts.focuscompare.FocusCompareScript;
import com.nfhsnetwork.calebsunitytool.scripts.focuscompare.FocusOutputFrame;
import com.nfhsnetwork.calebsunitytool.scripts.multiviewertag.MultiviewerTagScript;
import com.nfhsnetwork.calebsunitytool.ui.pixellotcsv.DragNDropCSV;
import com.nfhsnetwork.calebsunitytool.utils.Util.IOUtils;

/**
 *
 * @author calebbrandt
 */
public class ImportDataFrame extends javax.swing.JFrame {

	public static boolean DEBUGMODE = false;
	
	private ImportTypes importType = ImportTypes.OTHER;
	
    /**
     * Creates new form ImportDataFrame
     */
    public ImportDataFrame() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        sp_textarea = new javax.swing.JScrollPane();
        placeholderTextArea1 = new com.nfhsnetwork.calebsunitytool.ui.components.PlaceholderTextArea();
        p_sidebar = new javax.swing.JPanel();
        p_importtypecontainer = new javax.swing.JPanel();
        rb_it_focus = new javax.swing.JRadioButton();
        rb_it_other = new javax.swing.JRadioButton();
        p_buttonscontainer = new javax.swing.JPanel();
        p_importbuttoncontainer = new javax.swing.JPanel();
        button_import = new javax.swing.JButton();
        p_quickactionscontainer = new javax.swing.JPanel();
        button_focuscompare = new javax.swing.JButton();
        l_quickactions = new javax.swing.JLabel();
        button_mviewer = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Import Event Data");

        placeholderTextArea1.setColumns(20);
        placeholderTextArea1.setRows(5);
        placeholderTextArea1.setPlaceholder("Paste event data here.\nValid types: Focus sheet lines, game IDs, broadcasts IDs, URLs, etc.\nOne event per line.");
        sp_textarea.setViewportView(placeholderTextArea1);

        p_importtypecontainer.setBorder(javax.swing.BorderFactory.createTitledBorder("Import Type"));

        rb_it_focus.setFont(new java.awt.Font("Helvetica Neue", 0, 12)); // NOI18N
        rb_it_focus.setSelected(false);
        rb_it_focus.setText("Focus");
        rb_it_focus.addActionListener(new java.awt.event.ActionListener() {
            @Override
			public void actionPerformed(java.awt.event.ActionEvent evt) {
                rb_it_focusActionPerformed(evt);
            }
        });

        rb_it_other.setFont(new java.awt.Font("Helvetica Neue", 0, 12)); // NOI18N
        rb_it_other.setText("Other");
        rb_it_other.setSelected(true);
        rb_it_other.addActionListener(new java.awt.event.ActionListener() {
            @Override
			public void actionPerformed(java.awt.event.ActionEvent evt) {
                rb_it_otherActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout p_importtypecontainerLayout = new javax.swing.GroupLayout(p_importtypecontainer);
        p_importtypecontainer.setLayout(p_importtypecontainerLayout);
        p_importtypecontainerLayout.setHorizontalGroup(
            p_importtypecontainerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(p_importtypecontainerLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(p_importtypecontainerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(rb_it_other)
                    .addComponent(rb_it_focus))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        p_importtypecontainerLayout.setVerticalGroup(
            p_importtypecontainerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(p_importtypecontainerLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(rb_it_focus)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(rb_it_other)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        p_buttonscontainer.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        p_importbuttoncontainer.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        button_import.setText("IMPORT");
        button_import.addActionListener(new java.awt.event.ActionListener() {
            @Override
			public void actionPerformed(java.awt.event.ActionEvent evt) {
                button_importActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout p_importbuttoncontainerLayout = new javax.swing.GroupLayout(p_importbuttoncontainer);
        p_importbuttoncontainer.setLayout(p_importbuttoncontainerLayout);
        p_importbuttoncontainerLayout.setHorizontalGroup(
            p_importbuttoncontainerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(p_importbuttoncontainerLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(button_import, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        p_importbuttoncontainerLayout.setVerticalGroup(
            p_importbuttoncontainerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(p_importbuttoncontainerLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(button_import)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        p_quickactionscontainer.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        button_focuscompare.setText("FOCUS CMP");
        button_focuscompare.addActionListener(new java.awt.event.ActionListener() {
            @Override
			public void actionPerformed(java.awt.event.ActionEvent evt) {
                button_focuscompareActionPerformed(evt);
            }
        });

        l_quickactions.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        l_quickactions.setText("Quick Actions");

        button_mviewer.setText("MVIEWER");
        button_mviewer.addActionListener(new java.awt.event.ActionListener() {
            @Override
			public void actionPerformed(java.awt.event.ActionEvent evt) {
                button_mviewerActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout p_quickactionscontainerLayout = new javax.swing.GroupLayout(p_quickactionscontainer);
        p_quickactionscontainer.setLayout(p_quickactionscontainerLayout);
        p_quickactionscontainerLayout.setHorizontalGroup(
            p_quickactionscontainerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(p_quickactionscontainerLayout.createSequentialGroup()
                .addContainerGap(10, Short.MAX_VALUE)
                .addGroup(p_quickactionscontainerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(button_focuscompare, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(l_quickactions, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(button_mviewer, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap(10, Short.MAX_VALUE))
        );
        p_quickactionscontainerLayout.setVerticalGroup(
            p_quickactionscontainerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(p_quickactionscontainerLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(l_quickactions)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(button_focuscompare)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(button_mviewer)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout p_buttonscontainerLayout = new javax.swing.GroupLayout(p_buttonscontainer);
        p_buttonscontainer.setLayout(p_buttonscontainerLayout);
        p_buttonscontainerLayout.setHorizontalGroup(
            p_buttonscontainerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(p_buttonscontainerLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(p_buttonscontainerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(p_quickactionscontainer, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(p_importbuttoncontainer, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        p_buttonscontainerLayout.setVerticalGroup(
            p_buttonscontainerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(p_buttonscontainerLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(p_importbuttoncontainer, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(p_quickactionscontainer, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        javax.swing.GroupLayout p_sidebarLayout = new javax.swing.GroupLayout(p_sidebar);
        p_sidebar.setLayout(p_sidebarLayout);
        p_sidebarLayout.setHorizontalGroup(
            p_sidebarLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(p_sidebarLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(p_sidebarLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(p_importtypecontainer, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(p_buttonscontainer, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
        );
        p_sidebarLayout.setVerticalGroup(
            p_sidebarLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(p_sidebarLayout.createSequentialGroup()
                .addComponent(p_importtypecontainer, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(p_buttonscontainer, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(sp_textarea, javax.swing.GroupLayout.DEFAULT_SIZE, 417, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(p_sidebar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(p_sidebar, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(sp_textarea, javax.swing.GroupLayout.DEFAULT_SIZE, 339, Short.MAX_VALUE))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void rb_it_otherActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rb_it_otherActionPerformed
        rb_it_other.setSelected(true);
        rb_it_focus.setSelected(false);
        importType = UnityContainer.ImportTypes.OTHER;
    }//GEN-LAST:event_rb_it_otherActionPerformed
    
    private void rb_it_focusActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rb_it_focusActionPerformed
        rb_it_other.setSelected(false);
        rb_it_focus.setSelected(true);
        importType = UnityContainer.ImportTypes.FOCUS;
    }//GEN-LAST:event_rb_it_focusActionPerformed

    private void button_importActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_button_importActionPerformed
    	UnityContainer.makeNewContainer();
    	
    	SwingWorker<Void, Void> importWorker = new SwingWorker<>() {
			@Override
			protected Void doInBackground() throws Exception {
				UnityContainer.getContainer().importData(placeholderTextArea1.getText(), ImportDataFrame.this.importType);
				return null;
			}
    	};
    	
    	SwingUtilities.invokeLater(() -> {
    		disableAllComponents();
    		
    		UnityContainer.getContainer().addActionListener((e) -> {
    			ImportDataFrame.this.setVisible(false);
    			new MainWindow().setVisible(true);
    			ImportDataFrame.this.dispose();
    		});
    		
    		importWorker.execute();
    	});
    }//GEN-LAST:event_button_importActionPerformed

    private FocusCompareScript fe;
    
    private void button_focuscompareActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_button_focuscompareActionPerformed
        disableAllComponents();
        
        fe = new FocusCompareScript();
        importPxlCSV();
    }//GEN-LAST:event_button_focuscompareActionPerformed
    
    private void importPxlCSV()
    {
    	Function<File, File> onFileSelected = (file) -> {
			executeFocusScript(file);
			if (file == null)
				System.out.println("[DEBUG] Script executed with null csv.");
			else
				System.out.println("[DEBUG] Script executed with csv: " + file.getAbsolutePath());
			return null;
		};
    	
    	
    	Function<Void, Void> onCancel = (obj) -> {
    		enableAllComponents();
    		return null;
    	};
    	
    	SwingUtilities.invokeLater(() -> {
			new DragNDropCSV(SwingUtilities.windowForComponent(ImportDataFrame.this), "Import Pixellot CSV", Dialog.DEFAULT_MODALITY_TYPE, onFileSelected, onCancel)
					.setVisible(true);
		});
    }
    
	private void executeFocusScript(File f)
	{
		if (f != null)
		{
			parseClubCsv(f); // parses clubcsv, then recurs once with null param
			return;
		}
		
        SwingWorker<Integer, Void> setDataWorker = new SwingWorker<>() {
			@Override
			protected Integer doInBackground() throws Exception {
				System.out.println("[DEBUG] {doInBackground} SetDataWorker executed");
				return fe.setFocusData(ImportDataFrame.this.placeholderTextArea1.getText());
			}
			
			@Override
			protected void done()
			{
				System.out.println("W1 done");
				try {
					afterSetFocusData(get());
				} catch (InterruptedException | ExecutionException e1) {
					afterSetFocusData(FocusCompareScript.FAILED);
				}
			}
        };
        
        SwingUtilities.invokeLater(() -> {
    		ProgressBarDialogBox pbdb = new ProgressBarDialogBox(SwingUtilities.windowForComponent(ImportDataFrame.this));
    		JProgressBar bar = pbdb.getProgressBar();
    		
    		pbdb.setLocationRelativeTo(ImportDataFrame.this);
    		
    		fe.addPropertyChangeListener((e) -> {
        		if (e.getPropertyName().equals(FocusCompareScript.PC_PROGRESS))
        		{
        			//System.out.println("[DEBUG] {executeFocusScript} set value");
        			bar.setValue((Integer)e.getNewValue() * 100 / (Integer)e.getOldValue());
        		}
        		else if (e.getPropertyName().equals(FocusCompareScript.PC_DONE))
        		{
        			SwingUtilities.invokeLater(() -> {
						pbdb.setVisible(false);
						pbdb.dispose();
					});
        		}
        	});
    		
    		System.out.println("[DEBUG] {executeFocusScript} setDataWorker executed");
		    setDataWorker.execute();
    		pbdb.setVisible(true);
		});
	}
	
    private void parseClubCsv(File f) 
    {
    	SwingWorker<Void, Void> parseClubCsvWorker = new SwingWorker<>() {
			@Override
			protected Void doInBackground() throws Exception {
				fe.parseClubCSV(Arrays.asList(IOUtils.readFromFile(f).split("\\r\\n|\\n")));
				return null;
			}
			
			@Override
			protected void done()
			{
				System.out.println("[DEBUG] {parseclubcsv | done} club csv parse complete");
				executeFocusScript(null);
			}
		};
		
		SwingUtilities.invokeLater(() -> {
			parseClubCsvWorker.execute();
		});
	}

	private void afterSetFocusData(Integer x) 
    {
    	System.out.println("[DEBUG] {afterSetFocusData} method call");
    	if (x == FocusCompareScript.FAILED)
        {
        	int res = JOptionPane.showOptionDialog(this, "Invalid data.", "ERROR", JOptionPane.DEFAULT_OPTION, JOptionPane.ERROR_MESSAGE,
					null, null, null);

			if (res != 4) {
				enableAllComponents();
				return;
			}
        }
        else if (x == FocusCompareScript.SUCCESSFUL)
        {
        	SwingWorker<String, Void> compareWorker = new SwingWorker<>() {
        		@Override
        		public String doInBackground() {
        			System.out.println("[DEBUG] {afterSetFocusData} {doInBackground} Comparing focus");
        			return fe.compareFocus();
        		}
        		
        		@Override
        		public void done()
        		{
        			System.out.println("[DEBUG] {afterSetFocusData} {done()} focus compare done");
        			String output = null;
        			try {
        				output = get();
        			}
        			catch (ExecutionException | InterruptedException e)
        			{
        				e.printStackTrace();
        				output = "Operation failed for some reason. Run this again through Powershell with the command \".\\UnityTool.exe --debug\" and send Caleb the generated log.";
        			}
        			afterFocusScriptOperation(output);
        		}
        	};
        	compareWorker.execute();
        }
	}
    

	private void afterFocusScriptOperation(String s)
    {
		fe.firePropertyChangeEvent(FocusCompareScript.PC_DONE, null, null);
    	SwingUtilities.invokeLater(() -> {
    		new FocusOutputFrame(s).setVisible(true);
    	});
    	
    }
	
	
    private void button_mviewerActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_button_mviewerActionPerformed
        disableAllComponents();
        
        ProgressBarDialogBox bar = new ProgressBarDialogBox(this);
        //bar.setVisible(true);
        bar.setAlwaysOnTop(true);
        
        MultiviewerTagScript mts = new MultiviewerTagScript(this);
        mts.inputIDs(placeholderTextArea1.getText());
        
        mts.addPropertyChangeListener((e) -> {
        	if (e.getPropertyName().equals(MultiviewerTagScript.FINISHED)) 
        	{
        		afterMultiviewerOperation();
        	}
        	else if (e.getPropertyName().equals(MultiviewerTagScript.CHANGED))
        	{
        		bar.getProgressBar().setValue((Integer)e.getNewValue());
        	}
        });
        
        SwingWorker<Void, Void> sw = new SwingWorker<Void, Void>() {
			@Override
			protected Void doInBackground() throws Exception {
				mts.execute(bar);
				return null;
			}
        };
        
        //TODO figure out loading bar
        SwingUtilities.invokeLater(() -> {
        	bar.setVisible(true);
        	sw.execute();
        });
        
    }//GEN-LAST:event_button_mviewerActionPerformed
    
    
    private void afterMultiviewerOperation()
    {
    	int res = JOptionPane.showOptionDialog(this, "All games tagged for multiviewer.", "Task Complete.", JOptionPane.DEFAULT_OPTION, JOptionPane.INFORMATION_MESSAGE, null, null, null);
    	if (res != 4) {
    		System.exit(0);
    	}
    }
    
    
    

    
    protected void disableAllComponents() {
    	this.setEnabled(false);
    	rb_it_other.setEnabled(false);
    	rb_it_focus.setEnabled(false);
    	placeholderTextArea1.setEnabled(false);
    	this.button_focuscompare.setEnabled(false);
    	this.button_import.setEnabled(false);
    	this.button_mviewer.setEnabled(false);
    	this.sp_textarea.setEnabled(false);
    }
    
    protected void enableAllComponents() {
    	this.setEnabled(true);
    	rb_it_other.setEnabled(true);
    	rb_it_focus.setEnabled(true);
    	placeholderTextArea1.setEnabled(true);
    	this.button_focuscompare.setEnabled(true);
    	this.button_import.setEnabled(true);
    	this.button_mviewer.setEnabled(true);
    	this.sp_textarea.setEnabled(true);
    }
    
   
    
    
    
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Windows".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ImportDataFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ImportDataFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ImportDataFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ImportDataFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        
        if (args.length != 0)
        {
        	if (args[0].equals("--debug"))
        		Wrapper.isDebugMode = true;
        		//TODO make a controller main class that starts everything instead of starting it all from this frame.
        }
        
        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            @Override
			public void run() {
                new ImportDataFrame().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton button_focuscompare;
    private javax.swing.JButton button_import;
    private javax.swing.JButton button_mviewer;
    private javax.swing.JLabel l_quickactions;
    private javax.swing.JPanel p_buttonscontainer;
    private javax.swing.JPanel p_importbuttoncontainer;
    private javax.swing.JPanel p_importtypecontainer;
    private javax.swing.JPanel p_quickactionscontainer;
    private javax.swing.JPanel p_sidebar;
    private com.nfhsnetwork.calebsunitytool.ui.components.PlaceholderTextArea placeholderTextArea1;
    private javax.swing.JRadioButton rb_it_focus;
    private javax.swing.JRadioButton rb_it_other;
    private javax.swing.JScrollPane sp_textarea;
    // End of variables declaration//GEN-END:variables
}
