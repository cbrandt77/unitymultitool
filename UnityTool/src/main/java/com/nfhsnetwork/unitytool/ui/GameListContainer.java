/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.nfhsnetwork.unitytool.ui;

import java.awt.*;
import java.util.List;
import java.util.Map;
import java.util.Set;
import javax.swing.*;

import javax.swing.AbstractListModel;
import javax.swing.GroupLayout;
import javax.swing.JList;
import javax.swing.SwingConstants;
import javax.swing.UIManager;
import javax.swing.border.*;
import javax.swing.event.ListSelectionEvent;

import com.nfhsnetwork.unitytool.common.UnityContainer;
import com.nfhsnetwork.unitytool.logging.Debug;
import com.nfhsnetwork.unitytool.types.NFHSGameObject;

import java.awt.Component;
import java.awt.Insets;

/**
 *
 * @author calebbrandt
 */
public class GameListContainer extends javax.swing.JPanel {

    //private Map<String, NFHSGameObject> eventMap;

    private UIController c;
    private final UnityListModel model;
    
    
    public GameListContainer()
    {
        this.model = new UnityListModel();
        this.c = c;
        initComponents();
    }
    
    
    public GameListContainer(UIController c)
    {
        this.model = new UnityListModel();
    	this.c = c;
        initComponents();
    	this.list_gameIds.setSelectedIndex(0);
    }
    
    public GameListContainer(UIController c, Map<String, NFHSGameObject> eventMap)
    {
        this.model = new UnityListModel(eventMap);
        this.c = c;
        initComponents();
        this.list_gameIds.setSelectedIndex(0);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        container_gameList = new javax.swing.JPanel();
        scrollPane_gameIDs = new javax.swing.JScrollPane();
        list_gameIds = new javax.swing.JList<>();

        container_gameList.setBorder(javax.swing.BorderFactory.createTitledBorder("Events"));

        scrollPane_gameIDs.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        scrollPane_gameIDs.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);
        scrollPane_gameIDs.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_ALWAYS);
        scrollPane_gameIDs.setAutoscrolls(true);

        list_gameIds.setModel(model);
        list_gameIds.setAutoscrolls(false);
        list_gameIds.setCellRenderer(new CustomListCellRenderer());
        list_gameIds.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        list_gameIds.setMaximumSize(new java.awt.Dimension(143, 32767));
        list_gameIds.setMinimumSize(new java.awt.Dimension(143, 20));
        list_gameIds.setPreferredSize(new java.awt.Dimension(143, 0));
        list_gameIds.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                list_gameIdsValueChanged(evt);
            }
        });
        scrollPane_gameIDs.setViewportView(list_gameIds);

        javax.swing.GroupLayout container_gameListLayout = new javax.swing.GroupLayout(container_gameList);
        container_gameList.setLayout(container_gameListLayout);
        container_gameListLayout.setHorizontalGroup(
            container_gameListLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(container_gameListLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(scrollPane_gameIDs, javax.swing.GroupLayout.PREFERRED_SIZE, 143, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        container_gameListLayout.setVerticalGroup(
            container_gameListLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(container_gameListLayout.createSequentialGroup()
                .addComponent(scrollPane_gameIDs, javax.swing.GroupLayout.PREFERRED_SIZE, 468, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(container_gameList, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGap(0, 0, 0))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(container_gameList, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents
    
    private void list_gameIdsValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_list_gameIdsValueChanged
        gameIDsListValueChanged(evt);
    }//GEN-LAST:event_list_gameIdsValueChanged
    
    

    protected void gameIDsListValueChanged(ListSelectionEvent e) 
    {
    	if (e.getValueIsAdjusting())
    		return;
    	
    	@SuppressWarnings("unchecked")
		JList<NFHSGameObject> source = (JList<NFHSGameObject>)e.getSource();
    	
    	List<NFHSGameObject> selected = source.getSelectedValuesList();
    	
    	int x = selected.size();
    	if (x == 1)
    	{
    		Debug.out("[DEBUG] Selected size ONE");
    		c.onOneSelected(selected.get(0));
    	}
    	else if (x > 1)
    	{
    		Debug.out("[DEBUG] Selected size MULT, numSelected: " + x);
    		c.onMultipleSelected(selected);
    	}
    	else
    	{
    		Debug.out("[DEBUG] Selected size ELSE, numSelected: " + x); //TODO debug
    		c.onNoneSelected();
    	}
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel container_gameList;
    private javax.swing.JList<NFHSGameObject> list_gameIds;
    private javax.swing.JScrollPane scrollPane_gameIDs;
    // End of variables declaration//GEN-END:variables

    private class UnityListModel extends AbstractListModel<NFHSGameObject> 
    {
    	//TODO figure out how not to store the keys twice
        private final String[] strings;
        private final Map<String, NFHSGameObject> map;
    	
    	UnityListModel() 
    	{
    	    this.map = UnityContainer.getInstance().getEventMap();
    		final Set<String> keys = map.keySet();
    		strings = keys.toArray(new String[keys.size()]);
    	}
    	
    	UnityListModel(Map<String, NFHSGameObject> map)
        {
            this.map = map;
            final Set<String> keys = map.keySet();
            strings = keys.toArray(new String[keys.size()]);
        }
    	
    	@Override
    	public int getSize() {
    		return strings.length;
    	}

    	@Override
    	public NFHSGameObject getElementAt(int index) {
    		return map.get(strings[index]);
    	}

    }

    	protected enum VIEWTYPE {
            GAMEID,
            BDCID,
            TITLE
        }
    
    /**
     *
     * @author impro_000
     */
    @SuppressWarnings("rawtypes")
	public class CustomListCellRenderer extends javax.swing.JPanel implements javax.swing.ListCellRenderer {

        private final int SCROLLBAR_WIDTH = ((Integer)UIManager.get("ScrollBar.width"));
        private VIEWTYPE viewType = VIEWTYPE.GAMEID;
        
        
        public CustomListCellRenderer() {
            initComponents();
        }
        
        
        
        @SuppressWarnings("unchecked")
        private void initComponents() {

            label_gameID = new javax.swing.JLabel();

            setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(153, 153, 153)));
            
            label_gameID.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
            label_gameID.setHorizontalAlignment(SwingConstants.CENTER);
            label_gameID.setVerticalAlignment(SwingConstants.CENTER);
            
            add(label_gameID);
        }                       
        
        @Override
        public Insets getInsets()
        {
        	return new Insets(0, 0, 0, SCROLLBAR_WIDTH);
        }
        
        
        @SuppressWarnings("rawtypes")
        @Override
        public Component getListCellRendererComponent(JList list,
                                                      Object value,
                                                      int index,
                                                      boolean isSelected,
                                                      boolean cellHasFocus) {
            final String labelText;

            if (value instanceof NFHSGameObject)
            {
                    final NFHSGameObject nValue = (NFHSGameObject)value;
                    switch (viewType)
                    {
                            case GAMEID:
                                    labelText = nValue.getGameID();
                                    break;
                            case BDCID:
                                    labelText = nValue.getBdcIDs()[0];
                                    break;
                            case TITLE:
                                    labelText = nValue.getTitle(); //TODO actually hook this up to be a sort-by-title
                                    break;
                            default:
                                    labelText = "?"; //TODO
                    }
            }
            else
            {
                    labelText = "null";
            }


            label_gameID.setText(labelText);
            label_gameID.setOpaque(true);

            setBorder(javax.swing.BorderFactory.createEtchedBorder());

            if (isSelected)
            {
                setBackground(list.getSelectionBackground());
                setForeground(list.getSelectionForeground());
                label_gameID.setBackground(list.getSelectionBackground());
                label_gameID.setForeground(list.getSelectionForeground());
            }
            else
            {
                setBackground(list.getBackground());
                setForeground(list.getForeground());
                label_gameID.setBackground(list.getBackground());
                label_gameID.setForeground(list.getForeground());
            }
            
            setEnabled(list.isEnabled());
            label_gameID.setFont(list.getFont());

            //TODO change what the label says based on the viewtype.

            return this;
        }

        public void setViewType(VIEWTYPE v)
        {
            viewType = v;
        }

        // Variables declaration - do not modify                     
        private javax.swing.JLabel label_gameID;
        // End of variables declaration                   
    }

}
